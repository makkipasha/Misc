import boto3
from datetime import datetime, timedelta

# Initialize clients
acm_client = boto3.client('acm')
sns_client = boto3.client('sns')

# SNS Topic ARN
SNS_TOPIC_ARN = 'your_sns_topic_arn'  # Replace with your SNS topic ARN

# Thresholds in days
THRESHOLDS = [90, 60, 30]

def publish_to_sns(subject, message):
    sns_client.publish(
        TopicArn=SNS_TOPIC_ARN,
        Subject=subject,
        Message=message
    )

def handle_config_event(event):
    for record in event.get('invokingEvent', {}).get('configurationItemDiff', {}).get('changedProperties', []):
        if 'NotAfter' in record:
            expiry_date = datetime.strptime(record['NotAfter'], '%Y-%m-%dT%H:%M:%SZ')
            days_to_expiry = (expiry_date - datetime.utcnow()).days
            if days_to_expiry in THRESHOLDS:
                # Example alert for expired certificates
                publish_to_sns(
                    subject=f"ACM Certificate Expiry Alert",
                    message=f"Certificate expiring in {days_to_expiry} days!"
                )

def lambda_handler(event, context):
    try:
        handle_config_event(event)
        return {"statusCode": 200, "body": "Notifications sent successfully."}
    except Exception as e:
        return {"statusCode": 500, "body": f"Error: {str(e)}"}



{
  "invokingEvent": {
    "configurationItem": {
      "resourceType": "AWS::ACM::Certificate",
      "configuration": {
        "DomainName": "example.com",
        "NotAfter": "2025-04-01T12:00:00Z"
      },
      "arn": "arn:aws:acm:region:account-id:certificate/certificate-id"
    }
  },
  "resultToken": "test-token"
}
